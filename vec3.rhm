#lang rhombus
export: Vec3 Vec Pt
        cross dot
        ⊕ ⊖ ⊗ ⊘
        += -= *= /=
        unit_vector
        random_unit_vector
        random_on_hemisphere
        random_in_unit_disk
        reflect refract

import: "random.rhm" open

class Vec3(mutable x=0., mutable y=0. , mutable z=0.):
  nonfinal
  private implements MutableIndexable
  // constructor (x=0, y=0, z=0):  super(x,y,z)
  method add(w :: Vec3):        Vec3(x+w.x, y+w.y, z+w.z)
  method add_constant(c):       Vec3(x+c, y+c, z+c)
  method negate():              Vec3(-x,-y,-z)
  method subtract(w :: Vec3):   Vec3(x-w.x, y-w.y, z-w.z)
  method subtract_constant(c):  Vec3(x-c, y-c, z-c)
  method scale(c):              Vec3(x*c, y*c, z*c)
  method element_product(w):    Vec3(x*w.x, y*w.y, z*w.z)
  method dot_product(w):        x * w.x  +  y * w.y  +  z * w.z
  method cross(w):              Vec3(y*w.z - z*w.y,
                                     z*w.x - x*w.z,
                                     x*w.y - y*w.x)
  method add_assign(w):         x:=x+w.x; y:=y+w.y; z:=z+w.z; 
  method subtract_assign(w):    x:=x-w.x; y:=y-w.y; z:=z-w.z;
  method scale_assign(c):       x:=c*x; y:=c*y; z:=c*z;
  method length_squared():      this dot this
  method length():              math.sqrt(length_squared())
  method near_zero():
    def s=1e-8
    (math.abs(x) < s) && (math.abs(y) < s) && (math.abs(z) < s)
  method unit():                this ⊘ this.length()
  method random():              Vec3(random(), random(), random())
  method random2(min,max):      Vec3(random2(min,max),
                                     random2(min,max),
                                     random2(min,max))                    
  method display():             print(x, y, z)
  private override method get(index):
    cond
    | index == 0 : x
    | index == 1 : y
    | index == 2 : z
    | ~else error("index out of bounds, expected 0, 1 or 2")
  private override method set(index, value):
    cond
    | index == 0 : x := value
    | index == 1 : y := value
    | index == 2 : z := value
    | ~else error("index out of bounds, expected 0, 1 or 2")

fun unit_vector(v :: Vec3): v.unit()

fun random_vector():
  Vec3(random(), random(), random())
  
fun random2_vector(min,max):
  Vec3(random2(min,max), random2(min,max), random2(min,max))


fun random_in_unit_sphere():
  def p = random2_vector(-1.,1.)
  if p.length_squared() < 1
  | p
  | random_in_unit_sphere()


fun random_unit_vector():
  random_in_unit_sphere().unit()

fun random_on_hemisphere(normal):
  def on_unit_sphere = random_unit_vector()
  if (on_unit_sphere dot normal) > 0.0
  |  on_unit_sphere
  | -on_unit_sphere

fun random_in_unit_disk():
  def p = Vec(random2(-1., 1.), random2(-1., 1.), 0.0)
  if p.length_squared() < 1
  | p
  | random_in_unit_disk()  

fun reflect(v, n):
  // n is a unit vector
  v ⊖ (2 * (v dot n)) ⊗ n

fun refract(uv, n, eta_i_over_eta_t):
  def cos_theta        = math.min( ⊖uv dot n, 1.0)
  def ray_out_perp     = eta_i_over_eta_t ⊗ (uv ⊕ cos_theta ⊗ n)
  def parallel_factor  = - math.sqrt(math.abs(1. - ray_out_perp.length_squared()))
  def ray_out_parallel = parallel_factor ⊗ n
  ray_out_perp ⊕ ray_out_parallel


operator ⊕ :
  ~stronger_than < > <= >= ==
  ~weaker_than ⊗ ⊘ 
  ~same_as ⊖
| (v :: Vec3) ⊕ (w :: Vec3) :  v.add(w)
| (v :: Vec3) ⊕ c           :  v.add_constant(c)
|  c          ⊕ (w :: Vec3) :  w.add_constant(c)
|  a          ⊕ b           :  a + b

operator ⊖ :
  ~stronger_than < > <= >= ==
  ~weaker_than ⊗ ⊘
  ~same_as ⊕
|             ⊖ (w :: Vec3) :  w.negate()
|             ⊖  w          :  - w
| (v :: Vec3) ⊖ (w :: Vec3) :  v.subtract(w)
| (v :: Vec3) ⊖  c          :  v.subtract_constant(c)
|  c          ⊖ (w :: Vec3) :  Vec3(c,c,c) - w
|  a          ⊖  b          :  a - b

operator ⊗ :
  ~stronger_than < > <= >= ==
  ~same_as ⊘
| (v :: Vec3) ⊗  (w :: Vec3) : v.element_product(w)
| (v :: Vec3) ⊗  c           : v.scale(c)
|  c          ⊗ (v :: Vec3)  : v.scale(c)
|  a          ⊗  b           : a * b

operator ⊘ :
  ~stronger_than < > <= >= ==
  ~same_as ⊗
| (v :: Vec3) ⊘  c           : v.scale(1/c)
|  a          ⊘  b           : a / b


operator cross : ~stronger_than ⊕ ⊖ 
| (v :: Vec3) cross  (w :: Vec3) : v.cross(w)

operator dot : ~stronger_than ⊕ ⊖ 
| (v :: Vec3) dot  (w :: Vec3) : v.dot_product(w)

operator += : ~same_as :=
| (v :: Vec3)    += (w :: Vec3) :  v.add_assign(w)
operator -= : ~same_as :=
| (v :: Vec3) -= (w :: Vec3) :  v.subtract_assign(w)
operator *= : ~same_as :=
| (v :: Vec3) *= c           :  v.scale_assign(c)
operator /= : ~same_as :=
| (v :: Vec3) /= c           :  v.scale_assign(1/c)


class Pt():    extends Vec3
class Vec():   extends Vec3


// def o = Vec3()
// def p = Vec3(11,22,33)
// def q = Vec3(1,2,3)
// 
// [o,p,q]
// 
// p+q
// p+1
// 1+p
// 1+2
// 
// -p
// 
// p-q
// p-1
// 100-p
// 1-2
// 
// 2*p
// p*2
// p*q
// 2*3
// 
// p.length()
// p.length_squared()


