#lang rhombus
export Color write_color random_color random_color2

import "interval.rhm" open
import "vec3.rhm"     open
import "convert.rhm"  open
import "random.rhm"   open


// Listing 5
// 3.1 Color Utility Functions


// conversion from linear color space
fun linear_to_gamma(linear_component):
  if linear_component > 0
  | math.sqrt(linear_component)
  | 0

fun write_color(pixel):
  def mutable r = pixel.x
  def mutable g = pixel.y
  def mutable b = pixel.z
  // Apply a linear to gamma transform for gamma 2
  r := linear_to_gamma(r)
  g := linear_to_gamma(g)
  b := linear_to_gamma(b)
  // Translate the [0,1] component values to the byte range [0,255].
  def intensity = Interval(0.000, 0.999)
  def rbyte = int(256 * intensity.clamp(r))
  def gbyte = int(256 * intensity.clamp(g))
  def bbyte = int(256 * intensity.clamp(b))
  // Write out the pixel color components.
  println(rbyte, gbyte, bbyte)
  
fun random_color():
  Color(math.random(), math.random(), math.random())

fun random_color2(min, max):
  Color(random2(min, max), random2(min, max), random2(min, max))
