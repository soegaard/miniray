#lang rhombus/static
export: hittable HitRecord hit

import "rtweekend.rhm" open
import "material.rhm"  open

// p is point, normal a vector and t a number
class HitRecord(mutable p          :: Pt       = Pt(),
                mutable normal     :: Vec      = Vec(),
                mutable mat        :: Material = Material(),
                mutable t          :: Number   = 0,
                mutable front_face :: Boolean  = #true):
  method set_face_normal(r :: Ray, outward_normal :: Vec3):
    // Sets the hit record normal vector.
    // NOTE: the parameter `outward_normal` is assumed to have unit length.
    front_face := (r.direction dot outward_normal) < 0
    normal := (if front_face | outward_normal | âŠ–outward_normal)
  
interface hittable:  
  abstract method hit(r, ray_t, rec)



fun hit(hittables::List.of(hittable), r::Ray, ray_t::Interval) :~ maybe(HitRecord) :
  def          temp_rec       = HitRecord()
  def mutable  hit_anything   = #false
  def mutable  closest_so_far = ray_t.max

  for (object: hittables):
    def h = object.hit(r, Interval(ray_t.min, closest_so_far), temp_rec)
    when h:
    |  hit_anything   := #true
       closest_so_far := temp_rec.t
       
  if hit_anything
  | temp_rec
  | #false