#lang rhombus
export: Material
        Lambertian Metal Dielectric

import: "rtweekend.rhm" open

class Material():
  nonfinal
  // Public
  method scatter(ray_in, rec, attenuation_box, scattered_box):
    #false

// Matte
class Lambertian(albedo :: Color):
  extends Material

  override scatter(ray_in, rec, attenuation_box, scattered_box):
    def mutable scatter_direction = rec.normal + random_unit_vector()
    // Catch degenerate scatter direction
    when scatter_direction.near_zero()
    |  scatter_direction := rec.normal      
    scattered_box.value   := Ray(rec.p, scatter_direction)
    attenuation_box.value := albedo
    #true

// Reflective
class Metal(albedo = Color(1.,1.,1.),
            fuzz   :: ClampedReal(0., 1.0) = 0.0):
  extends Material
  
  override scatter(ray_in, rec, attenuation_box, scattered_box):
    def reflected =   reflect(ray_in.direction, rec.normal)
                    + fuzz * random_unit_vector()
    scattered_box.value   := Ray(rec.p, reflected)
    attenuation_box.value := albedo
    (scattered_box.value.direction dot rec.normal) > 0


// Refractive
//   Dielectric material with reflection
//   Used for glass, air bubbles etc.
class Dielectric(refraction_index):
  extends Material
  // Refractive index in vacuum or air, or the ratio of the material's
  // refractive index over the refractive index of the enclosing media
  
  override scatter(ray_in, rec, attenuation_box, scattered_box):
    // Attenuation is always 1 -- the glass surface absorbs nothing
    attenuation_box.value := Color(1., 1., 1.)
    
    def ri = (if rec.front_face | 1./refraction_index | refraction_index)
    def unit_direction = ray_in.direction.unit()
    def cos_theta = math.min( -unit_direction dot rec.normal, 1.)
    def sin_theta = math.sqrt(1.0 - cos_theta * cos_theta)
    def cannot_refract = ri * sin_theta > 1.
    def direction = (if cannot_refract
                       || reflectance(cos_theta, ri) > random():
                     | reflect(unit_direction, rec.normal)
                     | refract(unit_direction, rec.normal, ri))
    scattered_box.value   := Ray(rec.p, direction)
    #true

  fun reflectance(cosine, refraction_index):
    // Use Schlick's approximation for reflectance.
    def r0 = (1 - refraction_index) / (1 + refraction_index)
    def r  = r0*r0
    r + (1-r)*math.expt(1-cosine, 5)


